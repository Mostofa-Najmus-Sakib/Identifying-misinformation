{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Feature Engineering","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A_YO4yJobIEG","executionInfo":{"status":"ok","timestamp":1606942159321,"user_tz":420,"elapsed":8424,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"5daffe74-a8f7-4ba2-ef9f-18829345ae2a"},"source":["import csv \n","import re\n","!pip install emoji\n","import emoji\n","!pip install vaderSentiment\n","from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n","!pip install -U sentence-transformers\n","import pandas as pd\n","import scipy.io\n","from sklearn.preprocessing import StandardScaler\n","import numpy as np\n","import sys\n","import json\n","import string\n","import nltk\n","from tqdm import tqdm\n","from matplotlib import pyplot as plt\n","from pylab import hist, show, xticks, yticks\n","import seaborn as sns\n","import spacy\n","from spacy.lang.en import English\n","import networkx as nx\n","nltk.download('stopwords')\n","from nltk.corpus import stopwords\n","\n","\n","import warnings\n","warnings.filterwarnings(action='ignore')\n","warnings.simplefilter(\"ignore\", DeprecationWarning)\n","from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: emoji in /usr/local/lib/python3.6/dist-packages (0.6.0)\n","Requirement already satisfied: vaderSentiment in /usr/local/lib/python3.6/dist-packages (3.3.2)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from vaderSentiment) (2.23.0)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->vaderSentiment) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->vaderSentiment) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->vaderSentiment) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->vaderSentiment) (2020.11.8)\n","Requirement already up-to-date: sentence-transformers in /usr/local/lib/python3.6/dist-packages (0.3.9)\n","Requirement already satisfied, skipping upgrade: scikit-learn in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (0.22.2.post1)\n","Requirement already satisfied, skipping upgrade: numpy in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (1.18.5)\n","Requirement already satisfied, skipping upgrade: torch>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (1.7.0+cu101)\n","Requirement already satisfied, skipping upgrade: nltk in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (3.2.5)\n","Requirement already satisfied, skipping upgrade: scipy in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (1.4.1)\n","Requirement already satisfied, skipping upgrade: transformers<3.6.0,>=3.1.0 in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (3.5.1)\n","Requirement already satisfied, skipping upgrade: tqdm in /usr/local/lib/python3.6/dist-packages (from sentence-transformers) (4.41.1)\n","Requirement already satisfied, skipping upgrade: joblib>=0.11 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->sentence-transformers) (0.17.0)\n","Requirement already satisfied, skipping upgrade: future in /usr/local/lib/python3.6/dist-packages (from torch>=1.6.0->sentence-transformers) (0.16.0)\n","Requirement already satisfied, skipping upgrade: typing-extensions in /usr/local/lib/python3.6/dist-packages (from torch>=1.6.0->sentence-transformers) (3.7.4.3)\n","Requirement already satisfied, skipping upgrade: dataclasses in /usr/local/lib/python3.6/dist-packages (from torch>=1.6.0->sentence-transformers) (0.8)\n","Requirement already satisfied, skipping upgrade: six in /usr/local/lib/python3.6/dist-packages (from nltk->sentence-transformers) (1.15.0)\n","Requirement already satisfied, skipping upgrade: sentencepiece==0.1.91 in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (0.1.91)\n","Requirement already satisfied, skipping upgrade: sacremoses in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (0.0.43)\n","Requirement already satisfied, skipping upgrade: protobuf in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (3.12.4)\n","Requirement already satisfied, skipping upgrade: packaging in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (20.4)\n","Requirement already satisfied, skipping upgrade: tokenizers==0.9.3 in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (0.9.3)\n","Requirement already satisfied, skipping upgrade: regex!=2019.12.17 in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (2019.12.20)\n","Requirement already satisfied, skipping upgrade: filelock in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (3.0.12)\n","Requirement already satisfied, skipping upgrade: requests in /usr/local/lib/python3.6/dist-packages (from transformers<3.6.0,>=3.1.0->sentence-transformers) (2.23.0)\n","Requirement already satisfied, skipping upgrade: click in /usr/local/lib/python3.6/dist-packages (from sacremoses->transformers<3.6.0,>=3.1.0->sentence-transformers) (7.1.2)\n","Requirement already satisfied, skipping upgrade: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf->transformers<3.6.0,>=3.1.0->sentence-transformers) (50.3.2)\n","Requirement already satisfied, skipping upgrade: pyparsing>=2.0.2 in /usr/local/lib/python3.6/dist-packages (from packaging->transformers<3.6.0,>=3.1.0->sentence-transformers) (2.4.7)\n","Requirement already satisfied, skipping upgrade: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->transformers<3.6.0,>=3.1.0->sentence-transformers) (1.24.3)\n","Requirement already satisfied, skipping upgrade: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->transformers<3.6.0,>=3.1.0->sentence-transformers) (2020.11.8)\n","Requirement already satisfied, skipping upgrade: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->transformers<3.6.0,>=3.1.0->sentence-transformers) (2.10)\n","Requirement already satisfied, skipping upgrade: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->transformers<3.6.0,>=3.1.0->sentence-transformers) (3.0.4)\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":247},"id":"o9TXmo3cmQU7","executionInfo":{"status":"ok","timestamp":1606942360253,"user_tz":420,"elapsed":182027,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"afd6ee66-612b-48e6-face-3ffa6a9f1ad4"},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-880c4115-00a8-4e3e-8a38-aa3006f45140\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-880c4115-00a8-4e3e-8a38-aa3006f45140\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving all_news_b.xlsx to all_news_b.xlsx\n","Saving all_news_p.xlsx to all_news_p.xlsx\n","Saving user_news_b.xlsx to user_news_b.xlsx\n","Saving user_news_p.csv to user_news_p.csv\n","Saving user_user_b.xlsx to user_user_b.xlsx\n","Saving user_user_p.csv to user_user_p.csv\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Uwlx9O05gxxy"},"source":["Dataset Upload"]},{"cell_type":"code","metadata":{"id":"LSRTfcB4co3Q"},"source":["user_news_p=pd.read_csv(r'user_news_p.csv')\n","user_news_b =pd.read_excel(r'user_news_b.xlsx')\n","user_user_p=pd.read_csv(r'user_user_p.csv')\n","user_user_b=pd.read_excel(r'user_user_b.xlsx')\n","all_news_b=pd.read_excel(r'all_news_b.xlsx')\n","all_news_p=pd.read_excel(r'all_news_p.xlsx')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"euDJCO2lg1KY"},"source":["Network Features"]},{"cell_type":"code","metadata":{"id":"XioXC0fEdCjh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606955464437,"user_tz":420,"elapsed":13052269,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"ab5d9d3d-b17c-448a-aeae-80672c1ffb94"},"source":["# Centrality Measures\n","\n","user_user_b=user_user_b.rename(columns={'User_influence': 'source','User_follower':'target'})\n","user_user_p=user_user_p.rename(columns={'User_influence': 'source','User_follower':'target'})\n","user_user_b.info()\n","Graphtype = nx.DiGraph()\n","G_b= nx.from_pandas_edgelist(user_user_b, edge_attr=None, create_using=Graphtype)\n","Graphtype = nx.DiGraph()\n","G_p= nx.from_pandas_edgelist(user_user_p, edge_attr=None, create_using=Graphtype)\n","deg_b= nx.degree_centrality(G_b)\n","deg_p= nx.degree_centrality(G_p)\n","\n","page_b= nx.pagerank(G_b)\n","page_p= nx.pagerank(G_p)\n","\n","between_b= nx.betweenness_centrality(G_b)\n","between_p= nx.betweenness_centrality(G_p)\n","\n","eigen_b= nx.eigenvector_centrality(G_b)\n","eigen_p= nx.eigenvector_centrality(G_p)\n","\n","close_b= nx.closeness_centrality(G_b)\n","close_p= nx.closeness_centrality(G_p)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 634750 entries, 0 to 634749\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count   Dtype\n","---  ------  --------------   -----\n"," 0   target  634750 non-null  int64\n"," 1   source  634750 non-null  int64\n","dtypes: int64(2)\n","memory usage: 9.7 MB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VyZtmAO1dZ-K"},"source":["#eigen vector centrality\n","eigen_pp = pd.DataFrame.from_dict(eigen_p, orient='index',\n","                       columns=[ 'eigen_vector'])\n","eigen_bb = pd.DataFrame.from_dict(eigen_b, orient='index',\n","                       columns=[ 'eigen_vector'])\n","\n","eigen_user_p= pd.merge(user_news_p,eigen_pp,left_on='from_User',right_on=eigen_pp.index,how='inner')\n","eigen_user_b= pd.merge(user_news_b,eigen_bb,left_on='from_User',right_on=eigen_bb.index,how='inner')\n","\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","buzz_all = pd.merge(eigen_user_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(eigen_user_p,news_p,how='inner',on='News_id')\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","\n","# concatenate\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news['Average_eigen_vector']=all_news.groupby('News_id')['eigen_vector'].transform('mean')\n","#all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','Average_eigen_vector']).reset_index()\n","all_news1 = all_news[['news_id_','Average_eigen_vector']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UxJjcVojdrEz"},"source":["#degree centrality\n","degree_pp = pd.DataFrame.from_dict(deg_p, orient='index',\n","                       columns=[ 'degree_centrality'])\n","degree_bb = pd.DataFrame.from_dict(deg_b, orient='index',\n","                       columns=[ 'degree_centrality'])\n","degree_user_p= pd.merge(user_news_p,degree_pp,left_on='from_User',right_on=degree_pp.index,how='inner')\n","degree_user_b= pd.merge(user_news_b,degree_bb,left_on='from_User',right_on=degree_bb.index,how='inner')\n","\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","buzz_all = pd.merge(degree_user_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(degree_user_p,news_p,how='inner',on='News_id')\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","\n","# concatenate\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news['Average_degree_centrality']=all_news.groupby('News_id')['degree_centrality'].transform('mean')\n","#all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','Average_degree_centrality']).reset_index()\n","all_news3 = all_news[['news_id_','Average_degree_centrality']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"kfOg43w9ffkK"},"source":["#betweeness centrality\n","bet_pp = pd.DataFrame.from_dict(between_p, orient='index',\n","                       columns=[ 'betweeness'])\n","bet_bb = pd.DataFrame.from_dict(between_b, orient='index',\n","                       columns=[ 'betweeness'])\n","bet_user_p= pd.merge(user_news_p,bet_pp,left_on='from_User',right_on=bet_pp.index,how='inner')\n","bet_user_b= pd.merge(user_news_b,bet_bb,left_on='from_User',right_on=bet_bb.index,how='inner')\n","\n","\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","buzz_all = pd.merge(bet_user_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(bet_user_p,news_p,how='inner',on='News_id')\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","# concatenate\n","\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news['Average_betweeness']=all_news.groupby('News_id')['betweeness'].transform('mean')\n","#all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','Average_betweeness']).reset_index()\n","all_news5 = all_news[['news_id_','Average_betweeness']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-bqB7jDAf45_"},"source":["#closeness centrality\n","close_pp = pd.DataFrame.from_dict(close_p, orient='index',\n","                       columns=[ 'closeness'])\n","close_bb = pd.DataFrame.from_dict(close_b, orient='index',\n","                       columns=[ 'closeness'])\n","close_user_p= pd.merge(user_news_p,close_pp,left_on='from_User',right_on=close_pp.index,how='inner')\n","close_user_b= pd.merge(user_news_b,close_bb,left_on='from_User',right_on=close_bb.index,how='inner')\n","\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","buzz_all = pd.merge(close_user_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(close_user_p,news_p,how='inner',on='News_id')\n","\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","\n","# concatenate\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news['Average_closeness']=all_news.groupby('News_id')['closeness'].transform('mean')\n","#all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','Average_closeness']).reset_index()\n","all_news4 = all_news[['news_id_','Average_closeness']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"z8vGTgcndrO-"},"source":["#pagerank\n","page_pp = pd.DataFrame.from_dict(page_p, orient='index',\n","                       columns=[ 'pagerank'])\n","page_bb = pd.DataFrame.from_dict(page_b, orient='index',\n","                       columns=[ 'pagerank'])\n","page_user_p= pd.merge(user_news_p,page_pp,left_on='from_User',right_on=page_pp.index,how='inner')\n","page_user_b= pd.merge(user_news_b,page_bb,left_on='from_User',right_on=page_bb.index,how='inner')\n","\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url','authors','source'])\n","buzz_all = pd.merge(page_user_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(page_user_p,news_p,how='inner',on='News_id')\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","\n","# concatenate\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news['Average_page_rank']=all_news.groupby('News_id')['pagerank'].transform('mean')\n","#all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','Average_page_rank']).reset_index()\n","all_news2 = all_news[['news_id_','Average_page_rank']]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hJGYmcuSluth","colab":{"base_uri":"https://localhost:8080/","height":222},"executionInfo":{"status":"ok","timestamp":1606964379911,"user_tz":420,"elapsed":821,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"948c10a3-8490-4ade-c81a-c0c85cb5f23b"},"source":["eig_deg = pd.merge(all_news1,all_news2,on='news_id_',how='inner')\n","eig_deg_page = pd.merge(eig_deg,all_news3,on='news_id_',how='inner')\n","bet_clo = pd.merge(all_news4,all_news5,on='news_id_',how='inner')\n","all_centrality=pd.merge(bet_clo,eig_deg_page,on='news_id_',how='inner')\n","all_centrality = all_centrality.multiply(1000)\n","all_centrality.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>news_id_</th>\n","      <th>Average_closeness</th>\n","      <th>Average_betweeness</th>\n","      <th>Average_eigen_vector</th>\n","      <th>Average_page_rank</th>\n","      <th>Average_degree_centrality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PolitiFact_Real_1PolitiFact_Real_1PolitiFact_R...</td>\n","      <td>189.639571</td>\n","      <td>0.206424</td>\n","      <td>5.217281</td>\n","      <td>0.203672</td>\n","      <td>6.328480</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PolitiFact_Real_2PolitiFact_Real_2PolitiFact_R...</td>\n","      <td>194.640184</td>\n","      <td>0.183199</td>\n","      <td>2.477552</td>\n","      <td>0.055889</td>\n","      <td>3.256735</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PolitiFact_Real_3PolitiFact_Real_3PolitiFact_R...</td>\n","      <td>218.674868</td>\n","      <td>0.086296</td>\n","      <td>2.815245</td>\n","      <td>0.056492</td>\n","      <td>4.552992</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PolitiFact_Real_4PolitiFact_Real_4PolitiFact_R...</td>\n","      <td>170.011569</td>\n","      <td>0.063532</td>\n","      <td>3.160684</td>\n","      <td>0.036124</td>\n","      <td>5.102129</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PolitiFact_Real_5PolitiFact_Real_5PolitiFact_R...</td>\n","      <td>222.400467</td>\n","      <td>0.241438</td>\n","      <td>3.479180</td>\n","      <td>0.059094</td>\n","      <td>5.747189</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                            news_id_  ...  Average_degree_centrality\n","0  PolitiFact_Real_1PolitiFact_Real_1PolitiFact_R...  ...                   6.328480\n","1  PolitiFact_Real_2PolitiFact_Real_2PolitiFact_R...  ...                   3.256735\n","2  PolitiFact_Real_3PolitiFact_Real_3PolitiFact_R...  ...                   4.552992\n","3  PolitiFact_Real_4PolitiFact_Real_4PolitiFact_R...  ...                   5.102129\n","4  PolitiFact_Real_5PolitiFact_Real_5PolitiFact_R...  ...                   5.747189\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":106}]},{"cell_type":"markdown","metadata":{"id":"2gijeSpGg752"},"source":["Sentiment Analysis of text of news"]},{"cell_type":"code","metadata":{"id":"HH51i94LdrQ0"},"source":["news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','top_img',\n","                                                                                      'url','authors','source'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','top_img',\n","                                                                                      'url','authors','source'])\n","\n","def replace_emoji_emoticon(text):\n","  import emoji\n","  text = emoji.demojize(text)\n","  text = text.replace(\":\",\" \")\n","  text = ' '.join(text.split())\n","  return text\n","\n","def clean_text(text,replace_emoticons=True):\n","   \n","    filter_out = [r\"http\\S+\",r\"@[A-Za-z0-9]+\",r\"#[A-Za-z0-9]+\",r\"(\\w+:\\/\\/\\S+)\"]\n","    combined_pattern = r'|'.join(map(r'(?:{})'.format, filter_out))\n","    text = re.sub(combined_pattern, '', str(text))\n","    if replace_emoticons:\n","        text = replace_emoji_emoticon(text)\n","    return text\n","\n","analyser = SentimentIntensityAnalyzer()\n","def sentiment_analyzer_scores(sent):\n","    text = clean_text(sent,replace_emoticons=True)\n","    #print(text)\n","    if text !='' :\n","      score = analyser.polarity_scores(text)\n","      lb = score['compound']\n","      if lb >= 0.05:\n","          return 1\n","      elif (lb > -0.05) and (lb < 0.05):\n","          return 0\n","      else:\n","          return -1\n","\n","news_b['polarity'] = news_b['text'].apply(sentiment_analyzer_scores)\n","news_p['polarity'] = news_p['text'].apply(sentiment_analyzer_scores)\n","sentiment_pb= pd.concat([news_p,news_b])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"_OF0gSUsFeWX","executionInfo":{"status":"ok","timestamp":1606964400911,"user_tz":420,"elapsed":21271,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"54a14fa1-5ece-452d-be34-b08bbf22fe21"},"source":["sentiment_pb.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>News_id</th>\n","      <th>news_id_</th>\n","      <th>text</th>\n","      <th>title</th>\n","      <th>polarity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>PolitiFact_Real_1</td>\n","      <td>16.8k SHARES SHARE THIS STORY\\n\\nHillary Clint...</td>\n","      <td>Trump Just Insulted Millions Who Lost Everythi...</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>PolitiFact_Real_2</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>PolitiFact_Real_3</td>\n","      <td>Story highlights The House Oversight panel vot...</td>\n","      <td>House oversight panel votes Clinton IT chief i...</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>PolitiFact_Real_4</td>\n","      <td>We are absolutely heartbroken to hear about th...</td>\n","      <td>America Just Tragically Lost A Country Music I...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>PolitiFact_Real_5</td>\n","      <td>Nine years ago, a driver lost control of his p...</td>\n","      <td>Monuments to the Battle for the New South</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   News_id  ... polarity\n","0        1  ...       -1\n","1        2  ...       -1\n","2        3  ...       -1\n","3        4  ...        1\n","4        5  ...        1\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":108}]},{"cell_type":"markdown","metadata":{"id":"DbOCzdGNh37S"},"source":["Text Analysis"]},{"cell_type":"code","metadata":{"id":"uLWxkXZQm6mG"},"source":["all_news_b['plt'] = 'bf'\n","for i in range (182):\n","  if i<=90:\n","    all_news_b.loc[i,'news_type'] = 'real'\n","  else:\n","    all_news_b.loc[i,'news_type'] = 'fake'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Shk4evhfm6n6"},"source":["all_news_p['plt'] = 'pf'\n","for i in range (240):\n","  if i<=119:\n","    all_news_p.loc[i,'news_type'] = 'real'\n","  else:\n","    all_news_p.loc[i,'news_type'] = 'fake'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s9yeecdnm5ZX"},"source":["# Concating all Buzzfeed and Politifact\n","df_all_news = pd.concat([all_news_b, all_news_p])\n","df_all_news = df_all_news [['News_id', 'news_id_', 'top_img','text','authors','keywords','meta_data','canonical_link','images','title','url','summary','movies','publish_date','plt','news_type']]\n","df_all_news = df_all_news.rename(columns = {'news_id_' : 'news_alph_id'})\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8_JBeSREnB7L"},"source":["df_all_news_title = df_all_news[['News_id','news_alph_id','title','text','plt','news_type']].reset_index()\n","#df_all_news_title[180:185]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iOH0vi7LnMae"},"source":["Title Processing function"]},{"cell_type":"code","metadata":{"id":"TnBdOdBNnB8_"},"source":["def length_PTitle(title):\n","    \n","    spacy_stopwords = spacy.lang.en.stop_words.STOP_WORDS\n","    nlp = English()\n","    tokenizer = nlp.Defaults.create_tokenizer(nlp)\n","    sno = nltk.stem.SnowballStemmer('english')\n","    punc = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n","\n","    # Removing punctuations in string\n","    for p in title:  \n","        if p in punc:  \n","            title = title.replace(p, \"\") \n","    tokens = tokenizer(str(title))\n","\n","    \n","    token_list = [] # list of token\n","    lemma_list = [] # list of lemmatized token\n","\n","    for token in tokens:\n","        if token.lemma_.lower() not in spacy_stopwords:  # Removing Stop words\n","            token_list.append(token.text)\n","            lemma_list.append(token.lemma_)\n","\n","    # Applying Snowball Stemmer\n","    tokens_sm = []\n","    for w in token_list:\n","          tokens_sm.append(sno.stem(w))\n","\n","    #print(\"Token List: \", token_list)\n","    #print(\"Token List after Stemmarization: \", tokens_sm)\n","    #print(\"Number of Tokens: \", len(tokens_sm))\n","\n","    lemmas_sm = []\n","    for w in lemma_list:\n","          lemmas_sm.append(sno.stem(w))\n","    #print(\"Lemmatized Token List: \", lemma_list)\n","    #print(\"Lemmatized Token List after Stemmarization: \", lemmas_sm)\n","    #print(\"Number of Lemmatized Tokens: \", len(lemmas_sm))\n","    return len(lemmas_sm)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u-xPKr33nCAI","executionInfo":{"status":"ok","timestamp":1606964401737,"user_tz":420,"elapsed":19901,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"98278cad-c679-4d62-bd0e-5341989b36f6"},"source":["#Example of a title\n","test_title = df_all_news_title.loc[12]['title']\n","test_length = length_PTitle(test_title)\n","print(\"Given Title: \" , test_title)\n","print(\"Title Length: \", test_length)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Given Title:  Johnson: 'I’m going to sleep well at the end of all this'\n","Title Length:  5\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":289},"id":"MaR4VYRonCFk","executionInfo":{"status":"ok","timestamp":1606964533820,"user_tz":420,"elapsed":151742,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"b4bd18e0-a242-4dfb-aaa3-ea12831843a4"},"source":["# Title_Length\n","for i in range (len(df_all_news_title)):\n","  df_all_news_title.loc[i,'pros_title_length'] = length_PTitle(df_all_news_title.loc[i]['title'])\n","df_all_news_title[180:185]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>News_id</th>\n","      <th>news_alph_id</th>\n","      <th>title</th>\n","      <th>text</th>\n","      <th>plt</th>\n","      <th>news_type</th>\n","      <th>pros_title_length</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>180</th>\n","      <td>180</td>\n","      <td>181</td>\n","      <td>BuzzFeed_Fake_181</td>\n","      <td>People Noticed Something Odd About Hillary's O...</td>\n","      <td>\\n\\nThere’s a lot to be discussed about last n...</td>\n","      <td>bf</td>\n","      <td>fake</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>181</th>\n","      <td>181</td>\n","      <td>182</td>\n","      <td>BuzzFeed_Fake_182</td>\n","      <td>People Noticed Something Odd About Hillary’s O...</td>\n","      <td>People Noticed Something Odd About Hillary’s O...</td>\n","      <td>bf</td>\n","      <td>fake</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>182</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>PolitiFact_Real_1</td>\n","      <td>Trump Just Insulted Millions Who Lost Everythi...</td>\n","      <td>16.8k SHARES SHARE THIS STORY\\n\\nHillary Clint...</td>\n","      <td>pf</td>\n","      <td>real</td>\n","      <td>8.0</td>\n","    </tr>\n","    <tr>\n","      <th>183</th>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>PolitiFact_Real_2</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>pf</td>\n","      <td>real</td>\n","      <td>9.0</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>PolitiFact_Real_3</td>\n","      <td>House oversight panel votes Clinton IT chief i...</td>\n","      <td>Story highlights The House Oversight panel vot...</td>\n","      <td>pf</td>\n","      <td>real</td>\n","      <td>7.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     index  News_id       news_alph_id  ... plt news_type pros_title_length\n","180    180      181  BuzzFeed_Fake_181  ...  bf      fake               5.0\n","181    181      182  BuzzFeed_Fake_182  ...  bf      fake               7.0\n","182      0        1  PolitiFact_Real_1  ...  pf      real               8.0\n","183      1        2  PolitiFact_Real_2  ...  pf      real               9.0\n","184      2        3  PolitiFact_Real_3  ...  pf      real               7.0\n","\n","[5 rows x 8 columns]"]},"metadata":{"tags":[]},"execution_count":115}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":606},"id":"Dkot6ku-nCMy","executionInfo":{"status":"ok","timestamp":1606964534182,"user_tz":420,"elapsed":151884,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"a281d2f0-d502-480f-a34a-612b29abd12b"},"source":["b = pd.DataFrame(df_all_news_title[['pros_title_length','news_type','title']].groupby(['pros_title_length','news_type']).describe())\n","plt.figure(figsize=(15,10))\n","bx = sns.countplot(x=\"pros_title_length\", hue=\"news_type\", data=df_all_news_title)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x720 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Z2YiqmTtoWas"},"source":["Other Text features"]},{"cell_type":"code","metadata":{"id":"hu9ID72pdrUR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606964534433,"user_tz":420,"elapsed":151776,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"b8a23bc3-6bf2-4783-9aaa-d9100441a464"},"source":["df = sentiment_pb[['news_id_','text','title']]\n","df['text'].fillna(0,inplace=True)\n","df['text']=df['text'].astype('string')\n","df['title']=df['title'].astype('string')\n","df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 422 entries, 0 to 181\n","Data columns (total 3 columns):\n"," #   Column    Non-Null Count  Dtype \n","---  ------    --------------  ----- \n"," 0   news_id_  422 non-null    object\n"," 1   text      422 non-null    string\n"," 2   title     422 non-null    string\n","dtypes: object(1), string(2)\n","memory usage: 13.2+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1oBZPqGndrWQ"},"source":["def count_title(df):\n","  for ind, row in tqdm(df.iterrows()):\n","      line = row['title']\n","      #df.loc[ind,'count_mentions'] = sum([w == '@' for w in line.split(\" \")])\n","      #df.loc[ind,'count_video'] = sum([w == '[VIDEO]' for w in line.split(\" \")])\n","      df.loc[ind,'count_words_title'] = len([w for w in line.split(\" \")])\n","      df.loc[ind,'count_uppercased_title'] = len([w for w in line.split(\" \") if w.isupper()])\n","      df.loc[ind,'count_lowercased_title'] = len([w for w in line.split(\" \") if w.islower()])\n","      df.loc[ind,'count_punctuation_title'] = len([w for w in line if w in string.punctuation])\n","      \n","  return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMYq1PgddrYq"},"source":["def count_text(df):\n","  for ind, row in tqdm(df.iterrows()):\n","      line = row['text']\n","      df.loc[ind,'count_mentions'] = sum([w == '@' for w in line.split(\" \")])\n","      df.loc[ind,'count_video'] = sum([w == '[VIDEO]' for w in line.split(\" \")])\n","      df.loc[ind,'count_breaking'] = sum([w == 'Breaking' for w in line.split(\" \")])\n","      df.loc[ind,'count_No'] = sum([w == 'No' for w in line.split(\" \")])\n","      df.loc[ind,'count_do_not'] = sum([w == 'Do not' for w in line.split(\" \")])\n","      df.loc[ind,'count_never'] = sum([w == 'never'or w=='Never' for w in line.split(\" \")])\n","      df.loc[ind,'count_shares'] = sum([w == 'SHARES' for w in line.split(\" \")])\n","      df.loc[ind,'count_words'] = len([w for w in line.split(\" \")])\n","      df.loc[ind,'count_uppercased'] = len([w for w in line.split(\" \") if w.isupper()])\n","      df.loc[ind,'count_lowercased'] = len([w for w in line.split(\" \") if w.islower()])\n","      df.loc[ind,'count_punctuation'] = len([w for w in line if w in string.punctuation])\n","      \n","  return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"SQcQJCJMdram","colab":{"base_uri":"https://localhost:8080/","height":673},"executionInfo":{"status":"ok","timestamp":1606964537820,"user_tz":420,"elapsed":154586,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"8f8eb460-2ee3-43bf-c107-a72540af661a"},"source":["dataset_1 = count_text(df)\n","dataset_2 = count_title(df)\n","features =  pd.read_excel(r'./gdrive/My Drive/SMM/Data/features_Abi.xlsx')\n","final_data = pd.merge(dataset_1,features,on='news_id_',how='inner')\n","final_data.head()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["422it [00:02, 163.74it/s]\n","422it [00:00, 557.15it/s]\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>news_id_</th>\n","      <th>text</th>\n","      <th>title</th>\n","      <th>count_mentions</th>\n","      <th>count_video</th>\n","      <th>count_breaking</th>\n","      <th>count_No</th>\n","      <th>count_do_not</th>\n","      <th>count_never</th>\n","      <th>count_shares</th>\n","      <th>count_words</th>\n","      <th>count_uppercased</th>\n","      <th>count_lowercased</th>\n","      <th>count_punctuation</th>\n","      <th>count_words_title</th>\n","      <th>count_uppercased_title</th>\n","      <th>count_lowercased_title</th>\n","      <th>count_punctuation_title</th>\n","      <th>News_id_x</th>\n","      <th>total_shares</th>\n","      <th>LABEL</th>\n","      <th>Number of followers</th>\n","      <th>number_of_authors</th>\n","      <th>News_id_y</th>\n","      <th>polarity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>PolitiFact_Real_1</td>\n","      <td>16.8k SHARES SHARE THIS STORY\n","\n","Hillary Clinton...</td>\n","      <td>Trump Just Insulted Millions Who Lost Everythi...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>812.0</td>\n","      <td>11.0</td>\n","      <td>678.0</td>\n","      <td>85.0</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>36</td>\n","      <td>0</td>\n","      <td>407.347541</td>\n","      <td>4.0</td>\n","      <td>1</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>PolitiFact_Real_2</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>Famous dog killed in spot she waited a year fo...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>658.0</td>\n","      <td>2.0</td>\n","      <td>567.0</td>\n","      <td>105.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>2</td>\n","      <td>47</td>\n","      <td>0</td>\n","      <td>85.552829</td>\n","      <td>1.0</td>\n","      <td>2</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>PolitiFact_Real_3</td>\n","      <td>Story highlights The House Oversight panel vot...</td>\n","      <td>House oversight panel votes Clinton IT chief i...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>487.0</td>\n","      <td>4.0</td>\n","      <td>401.0</td>\n","      <td>65.0</td>\n","      <td>11.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>0</td>\n","      <td>148.892638</td>\n","      <td>2.0</td>\n","      <td>3</td>\n","      <td>-1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>PolitiFact_Real_4</td>\n","      <td>We are absolutely heartbroken to hear about th...</td>\n","      <td>America Just Tragically Lost A Country Music I...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1379.0</td>\n","      <td>8.0</td>\n","      <td>1195.0</td>\n","      <td>160.0</td>\n","      <td>11.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>0</td>\n","      <td>376.930153</td>\n","      <td>1.0</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>PolitiFact_Real_5</td>\n","      <td>Nine years ago, a driver lost control of his p...</td>\n","      <td>Monuments to the Battle for the New South</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>477.0</td>\n","      <td>9.0</td>\n","      <td>411.0</td>\n","      <td>69.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>0</td>\n","      <td>297.229069</td>\n","      <td>2.0</td>\n","      <td>5</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["            news_id_  ... polarity\n","0  PolitiFact_Real_1  ...       -1\n","1  PolitiFact_Real_2  ...       -1\n","2  PolitiFact_Real_3  ...       -1\n","3  PolitiFact_Real_4  ...        1\n","4  PolitiFact_Real_5  ...        1\n","\n","[5 rows x 25 columns]"]},"metadata":{"tags":[]},"execution_count":120}]},{"cell_type":"markdown","metadata":{"id":"fPfP7gXxieKy"},"source":["Extra features"]},{"cell_type":"code","metadata":{"id":"-2TI4jkedreV"},"source":["#shares per news\n","user_news_p['total_shares']=user_news_p.groupby('News_id')['shares'].transform('sum')\n","user_news_b['total_shares']=user_news_b.groupby('News_id')['shares'].transform('sum')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GdGLRsFMi0vb"},"source":["news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":202},"id":"pQ_jf9Pdjvue","executionInfo":{"status":"ok","timestamp":1606964540213,"user_tz":420,"elapsed":155609,"user":{"displayName":"Abishai Joy","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdYPXDTI0VUBBqyosw2ywTi86EJFcwbYxBsPKI=s64","userId":"00146332931227246855"}},"outputId":"dc5eb208-b8ef-4f05-ea16-0b1fedd3ccb8"},"source":["#Number of Authors per news\n","#politifact\n","user_user_p['count_followers']=user_user_p.groupby('User_influence')['User_follower'].transform('count')\n","user_user_p1=user_user_p.drop(columns=['User_follower'])\n","user_user_p1=user_user_p1.drop_duplicates()\n","follow_p=pd.merge(user_news_p,user_user_p1,how='inner',left_on='from_User',right_on='User_influence')\n","merge_user_follower = pd.merge(user_user_p,user_news_p,how='inner',left_on='User_influence',right_on='from_User').drop(columns=['User_influence'])\n","# Buzzfeed\n","user_user_b['count_followers']=user_user_b.groupby('User_influence')['User_follower'].transform('count')\n","user_user_b1=user_user_b.drop(columns=['User_follower'])\n","user_user_b1=user_user_b1.drop_duplicates()\n","\n","follow_b=pd.merge(user_news_b,user_user_b1,how='inner',left_on='from_User',right_on='User_influence')\n","merge_user_follower_b = pd.merge(user_user_b,user_news_b,how='inner',left_on='User_influence',right_on='from_User').drop(columns=['User_influence'])\n","news_b=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_b.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url'])\n","news_p=pd.read_excel(r'./gdrive/My Drive/SMM/Data/all_news_p.xlsx').drop(columns=['canonical_link','images','keywords','meta_data','movies','publish_date','summary','text','title','top_img',\n","                                                                                      'url'])\n","\n","buzz_all = pd.merge(merge_user_follower_b,news_b,how='inner',on='News_id')\n","politi_all = pd.merge(merge_user_follower,news_p,how='inner',on='News_id')\n","buzz_all= buzz_all.sort_values(by='News_id',ascending=True)\n","politi_all= politi_all.sort_values(by='News_id',ascending=True)\n","# concatenate\n","\n","all_news=pd.concat([politi_all,buzz_all])\n","all_news = all_news.drop(columns=['User_follower','from_User','shares'])\n","all_news = all_news.drop_duplicates(['news_id_','total_shares']).reset_index()\n","all_news1 = (all_news.authors.str.strip('[]')).str.replace(',','\\t').reset_index()\n","df2 = pd.merge(all_news1,all_news,left_on=all_news1.index,right_on=all_news.index,how='inner')\n","df2['authors_x'] = df2['authors_x'].str.split('\\t')\n","df3 = (df2\n"," .set_index(['news_id_'])['authors_x']\n"," .apply(pd.Series)\n"," .stack()\n"," .reset_index()\n"," .drop('level_1', axis=1)\n"," .rename(columns={0:'number_of_authors'}))\n","data=df3.groupby('news_id_')['number_of_authors'].count().reset_index()\n","all_news_all = all_news\n","merged = pd.merge(all_news_all,data,how='left',on='news_id_').drop(columns=['authors','count_followers','source','index'])\n","merged.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>News_id</th>\n","      <th>total_shares</th>\n","      <th>news_id_</th>\n","      <th>number_of_authors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>36</td>\n","      <td>PolitiFact_Real_1</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>47</td>\n","      <td>PolitiFact_Real_2</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>32</td>\n","      <td>PolitiFact_Real_3</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>19</td>\n","      <td>PolitiFact_Real_4</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>7</td>\n","      <td>PolitiFact_Real_5</td>\n","      <td>2.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   News_id  total_shares           news_id_  number_of_authors\n","0        1            36  PolitiFact_Real_1                4.0\n","1        2            47  PolitiFact_Real_2                1.0\n","2        3            32  PolitiFact_Real_3                2.0\n","3        4            19  PolitiFact_Real_4                1.0\n","4        5             7  PolitiFact_Real_5                2.0"]},"metadata":{"tags":[]},"execution_count":123}]},{"cell_type":"code","metadata":{"id":"AI8q31eOBKsC"},"source":[""],"execution_count":null,"outputs":[]}]}